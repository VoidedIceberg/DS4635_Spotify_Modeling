knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
Summary(Boston)
summary(Boston)
Boston
?Boston
library(MASS)
summary(Boston)
?Bostion
?Boston
binCrim = Boston$crim
summary(Boston)
binCrim = Boston$crim
binCrim[median(Boston$crim) < Boston$crim] <- 1
test = (dim(Boston)[1]):dim(Boston)[1]/2
train = ((dim(Boston)[1]/2)+1):dim(Boston)
train = ((dim(Boston)[1]/2)+1):dim(Boston)[1]
test = (dim(Boston)[1]):dim(Boston)[1]/2
Boston = data.frame(Boston, binCrim)
train = ((dim(Boston)[1]/2)+1):dim(Boston)[1]
test = (dim(Boston)[1]):dim(Boston)[1]/2
cor(Boston)
logistic <- glm(binCrim~Boston$tax+Boston$rad+Boston$dis+Boston$age+Boston$nox+Boston$indus, Boston.train, family=binomial)
Boston.train = Boston[train, ]
train = Boston[train, ]
test = Boston[test, ]
logistic <- glm(binCrim~Boston$tax+Boston$rad+Boston$dis+Boston$age+Boston$nox+Boston$indus, train, family=binomial)
logistic <- glm(binCrim~Boston$rad+Boston$dis+Boston$age+Boston$nox+Boston$indus, train, family=binomial)
Boston.fit <- glm(binCrim~tax+rad+dis+age+nox+indus, train, family=binomial)
Boston.predictions <- predict(Boston.fit, test, type="Response")
Boston.predictions <- predict(Boston.fit, test, type="response")
Boston.probibilites <- predict(Boston.fit, test, type="response")
Boston.predictions[Boston.probibilites > 0.5] = 1
table(Boston.predictions, binCrim.test)
binCrim.test = binCrim[test]
library(MASS)
summary(Boston)
binCrim = Boston$crim
binCrim[median(Boston$crim) < Boston$crim] <- 1
Boston = data.frame(Boston, binCrim)
train = ((dim(Boston)[1]/2)+1):dim(Boston)[1]
test = (dim(Boston)[1]):dim(Boston)[1]/2
Boston.train = Boston[train, ]
Boston.test = Boston[test, ]
binCrim.test = binCrim[test]
cor(Boston)
Boston.fit <- glm(binCrim~tax+rad+dis+age+nox+indus, Boston.train, family=binomial)
Boston.probibilites <- predict(Boston.fit, test, type="response")
Boston.predictions = rep(0, length(Boston.probibilites))
Boston.predictions[Boston.probibilites > 0.5] = 1
table(Boston.predictions, binCrim.test)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
summary(Boston)
binCrim = Boston$crim
binCrim[median(Boston$crim) < Boston$crim] <- 1
Boston = data.frame(Boston, binCrim)
train = ((dim(Boston)[1]/2)+1):dim(Boston)[1]
test = (dim(Boston)[1]):dim(Boston)[1]/2
Boston.train = Boston[train, ]
Boston.test = Boston[test, ]
binCrim.test = binCrim[test]
cor(Boston)
Boston.fit <- glm(binCrim~tax+rad+dis+age+nox+indus, Boston.train, family=binomial)
Boston.probibilites <- predict(Boston.fit, test, type="response")
Boston.probibilites <- predict(Boston.fit, Boston.test, type="response")
Boston.predictions = rep(0, length(Boston.probibilites))
Boston.predictions[Boston.probibilites > 0.5] = 1
table(Boston.predictions, binCrim.test)
Boston.fit <- glm(binCrim~tax+rad+dis+age+nox+indus, Boston.train, family=binomial)
Boston.probibilites <- predict(Boston.fit, Boston.test, type="response")
Boston.predictions = rep(0, length(Boston.probibilites))
Boston.predictions[Boston.probibilites > 0.5] = 1
table(Boston.predictions, binCrim.test)
Boston.lda <- lda(binCrim~tax+rad+dis+age+nox+indus, Boston.train)
Boston.ldatest <- predict(Boston.lda, Boston.test, type="response")
Boston.ldatest1 <- rep(0, length(Boston.ldatest))
Boston.lda <- lda(binCrim~tax+rad+dis+age+nox+indus, Boston.train)
Boston.ldatest <- predict(Boston.lda, Boston.test, type="response")
Boston.ldatest1 <- rep(0, length(Boston.ldatest))
Boston.ldatest1[Boston.ldatest > 0.5] = 1
confusionMatrix(Boston.ldatest, Boston.test)
library(klar)
library(klaR)
install.packages("klaR")
library(caret)
library(caret)
library(klaR)
confusionMatrix(Boston.ldatest, Boston.test)
confusionMatrix(Boston$ldatest, Boston$test)
knitr::opts_chunk$set(echo = TRUE)
library(klaR)
library(klaR)
library(caret)
Boston.lda <- lda(binCrim~tax+rad+dis+age+nox+indus, Boston.train)
library(MASS)
summary(Boston)
binCrim = Boston$crim
binCrim[median(Boston$crim) < Boston$crim] <- 1
Boston = data.frame(Boston, binCrim)
train = ((dim(Boston)[1]/2)+1):dim(Boston)[1]
test = (dim(Boston)[1]):dim(Boston)[1]/2
Boston.train = Boston[train, ]
Boston.test = Boston[test, ]
binCrim.test = binCrim[test]
cor(Boston)
library(klaR)
library(caret)
Boston.lda <- lda(binCrim~tax+rad+dis+age+nox+indus, Boston.train)
Boston.ldatest <- predict(Boston.lda, Boston.test, type="response")
confusionMatrix(Boston$ldatest, Boston$test)
Boston.ldatest <- predict(Boston.lda, Boston.test)
confusionMatrix(Boston$ldatest, Boston$test)
confusionMatrix(Boston$class, Boston$test)
Boston.ldaprobs <- predict(Boston.lda, Boston.test, type="response")
Boston.ldapred = rep(0, length(Boston.ldaprobs))
table(Boston.ldapred, binCrim.test)
Boston.lda <- lda(binCrim~tax+rad+dis+age+nox+indus, Boston.train)
Boston.ldaprobs <- predict(Boston.lda, Boston.test, type="response")
Boston.ldapred = rep(0, length(Boston.ldaprobs))
Boston.ldapred[Boston.ldaprobs > 0.5] = 1
table(Boston.ldapred, binCrim.test)
Boston.ldapred[Boston.ldaprobs > 0.5] = 1
Boston.lda <- glm(binCrim~tax+rad+dis+age+nox+indus, Boston.train, family = binomial)
Boston.ldaprobs <- predict(Boston.lda, Boston.test, type="response")
Boston.ldapred = rep(0, length(Boston.ldaprobs))
Boston.ldapred[Boston.ldaprobs > 0.5] = 1
table(Boston.ldapred, binCrim.test)
Boston.fit <- glm(binCrim~tax+rad+dis+age+nox+indus, Boston.train, family = binomial)
Boston.probs <- predict(Boston.lda, Boston.test, type="response")
Boston.pred = rep(0, length(Boston.ldaprobs))
Boston.pred[Boston.ldaprobs > 0.5] = 1
table(Boston.pred, binCrim.test)
binCrim = rep(0,length(crim))
binCrim = rep(0,length(Boston$crim))
binCrim[median(Boston$crim) < Boston$crim] <- 1
library(MASS)
summary(Boston)
binCrim = rep(0,length(Boston$crim))
binCrim[median(Boston$crim) < Boston$crim] <- 1
Boston = data.frame(Boston, binCrim)
train = 1:dim(Boston)[1]/2
test = (dim(Boston)[1]/2+1):dim(Boston)[1]
Boston.train = Boston[train, ]
Boston.test = Boston[test, ]
binCrim.test = binCrim[test]
cor(Boston)
Boston.lda <- glm(binCrim~tax+rad+dis+age+nox+indus, Boston.train, family = binomial)
Boston.ldaprobs <- predict(Boston.lda, Boston.test, type="response")
Boston.ldapred = rep(0, length(Boston.ldaprobs))
Boston.ldapred[Boston.ldaprobs > 0.5] = 1
table(Boston.ldapred, binCrim.test)
Boston.lda <- lda(binCrim~tax+rad+dis+age+nox+indus, Boston.train)
Boston.ldaprobs <- predict(Boston.lda, Boston.test, type="response")
Boston.ldapred = rep(0, length(Boston.ldaprobs))
Boston.ldapred[Boston.ldaprobs > 0.5] = 1
table(Boston.ldapred, binCrim.test)
summary(Boston.lda)
Boston.lda <- glm(binCrim~tax+rad+dis+age+nox+indus, Boston.train, family = binomial)
summary(Boston.lda)
Boston.lr <- glm(binCrim~tax+rad+dis+age+nox+indus, Boston.train, family = binomial)
Boston.lrprobs <- predict(Boston.lr, Boston.test, type="response")
Boston.lrpred = rep(0, length(Boston.lrprobs))
Boston.lrpred[Boston.lrprobs > 0.5] = 1
table(Boston.lrpred, binCrim.test)
summary(Boston.lda)
Boston.lda <- lda(binCrim~tax+rad+dis+age+nox+indus, data = Boston.train, family=binomial)
Boston.ldapredict = predict(Boston.lda, Boston.test)
table(Boston.ldapredict$class,binCrim.test)
Knn.K=cbind(tax,rad,dis,age,nox,indus)[Knn,]
Knn.K=cbind(Boston$tax,Boston$rad,Boston$dis,Boston$age,Boston$nox,Boston$indus)[Knn,]
train.K=cbind(Boston$tax,Boston$rad,Boston$dis,Boston$age,Boston$nox,Boston$indus)[Knn,]
train.K=cbind(Boston$tax,Boston$rad,Boston$dis,Boston$age,Boston$nox,Boston$indus)[train,]
Knn
train
test.K=cBind(Boston$tax,Boston$rad,Boston$dis,Boston$age,Boston$nox,Boston$indus)[test,]
test.K=cbind(Boston$tax,Boston$rad,Boston$dis,Boston$age,Boston$nox,Boston$indus)[test,]
BostonKnn.predict=knn(train.K,test.K,binCrim.test, k=1)
Bosknn.predict=knn(train.K,test.K,binCrim.test, k=1)
Bosknn.predict=knn(train.K,test.K,binCrim.test, k=1)
Bosknn.predict=knn1(train.K,test.K,binCrim.test, k=1)
Bosknn.predict=knn1(train.K,test.K,binCrim.test)
knitr::opts_chunk$set(echo = TRUE)
train.K=cbind(Boston$tax,Boston$rad,Boston$dis,Boston$age,Boston$nox,Boston$indus)[train,]
test.K=cbind(Boston$tax,Boston$rad,Boston$dis,Boston$age,Boston$nox,Boston$indus)[test,]
train.K=cbind(Boston$tax,Boston$rad,Boston$dis,Boston$age,Boston$nox,Boston$indus)[train,]
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
summary(Boston)
binCrim[median(Boston$crim) < Boston$crim] <- 1
Boston = data.frame(Boston, binCrim)
train = 1:dim(Boston)[1]/2
library(MASS)
summary(Boston)
binCrim = rep(0,length(Boston$crim))
binCrim[median(Boston$crim) < Boston$crim] <- 1
Boston = data.frame(Boston, binCrim)
train = 1:dim(Boston)[1]/2
test = (dim(Boston)[1]/2+1):dim(Boston)[1]
Boston.train = Boston[train, ]
Boston.test = Boston[test, ]
binCrim.test = binCrim[test]
cor(Boston)
Boston.lr <- glm(binCrim~tax+rad+dis+age+nox+indus, Boston.train, family = binomial)
Boston.lrprobs <- predict(Boston.lr, Boston.test, type="response")
Boston.lrpred = rep(0, length(Boston.lrprobs))
Boston.lrpred[Boston.lrprobs > 0.5] = 1
table(Boston.lrpred, binCrim.test)
summary(Boston.lda)
summary(Boston.lr)
Boston.lda <- lda(binCrim~tax+rad+dis+age+nox+indus, data = Boston.train, family=binomial)
Boston.ldapredict = predict(Boston.lda, Boston.test)
table(Boston.ldapredict$class,binCrim.test)
train.K=cbind(Boston$tax,Boston$rad,Boston$dis,Boston$age,Boston$nox,Boston$indus)[train,]
test.K=cbind(Boston$tax,Boston$rad,Boston$dis,Boston$age,Boston$nox,Boston$indus)[test,]
Bosknn.predict=knn1(train.K,test.K,binCrim.test)
Bosknn.predict=knn(train.K,test.K,binCrim.test)
library(class)
train.K=cbind(Boston$tax,Boston$rad,Boston$dis,Boston$age,Boston$nox,Boston$indus)[train,]
test.K=cbind(Boston$tax,Boston$rad,Boston$dis,Boston$age,Boston$nox,Boston$indus)[test,]
Bosknn.predict=knn(train.K,test.K,binCrim.test)
Bosknn.predict=knn(train.K,test.K,binCrim.test, k=1)
Bostonknn.predict=knn(train.K,test.K,binCrim.test, k=1)
train.K=cbind(Boston$tax,Boston$rad,Boston$dis,Boston$age,Boston$nox,Boston$indus)[train,]
test.K=cbind(Boston$tax,Boston$rad,Boston$dis,Boston$age,Boston$nox,Boston$indus)[test,]
Bostonknn.predict=knn(train.K,test.K,binCrim.test, k=1)
library(MASS)
summary(Boston)
binCrim = rep(0,length(Boston$crim))
binCrim[median(Boston$crim) < Boston$crim] <- 1
Boston = data.frame(Boston, binCrim)
train = 1:(dim(Boston)[1]/2)
test = (dim(Boston)[1]/2 + 1):dim(Boston)[1]
Boston.train = Boston[train, ]
Boston.test = Boston[test, ]
binCrim.test = binCrim[test]
cor(Boston)
Boston.lr <- glm(binCrim~tax+rad+dis+age+nox+indus, Boston.train, family = binomial)
Boston.lrprobs <- predict(Boston.lr, Boston.test, type="response")
Boston.lrpred = rep(0, length(Boston.lrprobs))
Boston.lrpred[Boston.lrprobs > 0.5] = 1
table(Boston.lrpred, binCrim.test)
summary(Boston.lr)
Boston.lda <- lda(binCrim~tax+rad+dis+age+nox+indus, data = Boston.train, family=binomial)
Boston.ldapredict = predict(Boston.lda, Boston.test)
table(Boston.ldapredict$class,binCrim.test)
library(class)
train.K=cbind(Boston$tax,Boston$rad,Boston$dis,Boston$age,Boston$nox,Boston$indus)[train,]
test.K=cbind(Boston$tax,Boston$rad,Boston$dis,Boston$age,Boston$nox,Boston$indus)[test,]
Bostonknn.predict=knn(train.K,test.K,binCrim.test, k=1)
table(Bostonknn.predict, binCrim.test)
Bostonknn.predict=knn(train.K,test.K,binCrim.test, k=200)
table(Bostonknn.predict, binCrim.test)
Bostonknn.predict=knn(train.K,test.K,binCrim.test, k=150)
table(Bostonknn.predict, binCrim.test)
1-((1-1/10000)^10000)
1-((1-1/100)^100)
1-((1-1/5)^5)
x = 1:10000
x = 1:10000
plot(x, 1-((1-(1/x))^x))
store=rep(NA, 10000)
for(i in 1:10000) {
store[i]=sum(sample (1:100, rep=TRUE)==4) >0
}
mean(store)
--------------------------------------------------------
set.seed(1)
set.seed(1)
x=rnorm(100)
y=x-2*x^2+rnorm (100)
plot(x, y)
set.seed(34)
library(boot)
set.seed(34)
df <- data.frame(x, y)
fit.glm.1 <- glm(y~x)
cv.glm(df,fit.glm.1)$delta[1]
library(boot)
set.seed(34)
df <- data.frame(x, y)
fit.glm.1 <- glm(y~x)
cv.glm(df,fit.glm.1)$delta[1]
set.seed(33)
df <- data.frame(x, y)
fit.glm.1 <- glm(y~x)
cv.glm(df,fit.glm.1)$delta[1]
fit.glm.2 <- glm(y~x^2)
cv.glm(df,fit.glm.1)$delta[1]
cv.glm(df,fit.glm.2)$delta[1]
fit.glm.2 <- glm(y~poly(x,2))
cv.glm(df,fit.glm.2)$delta[1]
cv.glm(df,fit.glm.3)$delta[1]
fit.glm.2 <- glm(y~poly(x,3))
cv.glm(df,fit.glm.3)$delta[1]
fit.glm.3 <- glm(y~poly(x,3))
cv.glm(df,fit.glm.3)$delta[1]
fit.glm.4 <- glm(y~poly(x,4))
cv.glm(df,fit.glm.5)$delta[1]
cv.glm(df,fit.glm.4)$delta[1]
set.seed(21)
set.seed(21)
fit.glm.1 <- glm(y~x)
cv.glm(df,fit.glm.1)$delta[1]
fit.glm.2 <- glm(y~poly(x,2))
cv.glm(df,fit.glm.2)$delta[1]
fit.glm.3 <- glm(y~poly(x,3))
cv.glm(df,fit.glm.3)$delta[1]
fit.glm.4 <- glm(y~poly(x,4))
cv.glm(df,fit.glm.4)$delta[1]
data_cor <- cor(Boston[ , colnames(Boston) != "crim"], Boston$crim)
data_cor
data_cor <- cor(Boston[ , colnames(Boston) != "binCrim"], Boston$binCrim)
data_cor
knitr::opts_chunk$set(echo = TRUE)
library(caret)
Spotify = read.csv("SpotifyFeatureEngineeredCSV.csv")
drops = c("artist_name","track_name", "track_id", "ï..genre", "key", "mode", "time_signature")
df = Spotify[ , !(names(Spotify) %in% drops)]
set.seed(2022)
indexes = createDataPartition(df$popularity, p = .85, list = F)
train = df[indexes, ]
test = df[-indexes, ]
train_x = train[, -14]
train_x = scale(train_x)[,]
train_y = train[,14]
hist(train_x, xlim=c(-5,5), breaks=100)
test_x = test[, -14]
test_x = scale(test[,-14])[,]
test_y = test[,14]
summary(df)
library(class);
knnmodel = knnreg(train_x, train_y)
str(knnmodel)
pred_y = predict(knnmodel, data.frame(test_x))
print(data.frame(test_y, pred_y))
mse = mean((test_y - pred_y)^2)
mae = caret::MAE(test_y, pred_y)
rmse = caret::RMSE(test_y, pred_y)
cat("MSE: ", mse, "MAE: ", mae, " RMSE: ", rmse)
table(pred_y, test_y)
plot(x, test_y[0:length(x)], col = "red",
main = "Spotify Popularity test data Perdiction"),
x = 1:10
plot(x, test_y, col = "red", type = "l", lwd=2,
main = "Spotify Popularity test data Perdiction")
plot(x, test_y, col = "red", type = "l", lwd=2,
main = "Spotify Popularity test data Perdiction")
x = 1:length(test_y)
plot(x, test_y, col = "red", type = "l", lwd=2,
main = "Spotify Popularity test data Perdiction")
lines(x, pred_y, col = "blue", lwd=2)
legend("topright",  legend = c("original-medv", "predicted-medv"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
grid()
x = 1:10
plot(x, test_y, col = "red", type = "l", lwd=2,
main = "Spotify Popularity test data Perdiction")
plot(x, test_y[1:length(x)], col = "red", type = "l", lwd=2,
main = "Spotify Popularity test data Perdiction")
points(x, pred_y, col = "blue", lwd=2)
point(x, pred_y, col = "blue", lwd=2)
points(x, pred_y, col = "blue", lwd=2)
x = 1:10
plot(x, test_y[1:length(x)], col = "red", type = "l", lwd=2,
main = "Spotify Popularity test data Perdiction")
points(x, pred_y[1:length(x)], col = "blue", lwd=2)
legend("topright",  legend = c("original-medv", "predicted-medv"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
grid()
plot(x, test_y[1:length(x)], col = "red",
main = "Spotify Popularity test data Perdiction")
points(x, pred_y[1:length(x)], col = "blue", lwd=2)
legend("topright",  legend = c("original-medv", "predicted-medv"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
x = 1:10
plot(x, test_y[1:length(x)], col = "red",
main = "Spotify Popularity test data Perdiction")
points(x, pred_y[1:length(x)], col = "blue", lwd=2)
legend("topright",  legend = c("original-medv", "predicted-medv"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
grid()
pred_y = predict(knnmodel, data.frame(test_x))
print(data.frame(test_y, pred_y))
mse = mean((test_y - pred_y)^2)
mae = caret::MAE(test_y, pred_y)
rmse = caret::RMSE(test_y, pred_y)
cat("MSE: ", mse, "MAE: ", mae, " RMSE: ", rmse)
bintesty = if (test_y < 0.5) 1 else 0;
summary(bintesty)
summary(test_y)
bintesty = if (test_y < 0.4420) 1 else 0;
bintestpred_y = if (test_y < 0.4420) 1 else 0;
bintesty[if (test_y < 0.4420) 1 else 0];
bintesty = test_y[if (test_y < 0.4420) 1 else 0];
bintesty = test_y[if (test_y < 0.4420) 1 else 0];
bintesty = test_y[if (test_y < 0.4420) 1 else 0];
bintestpred_y = pred_y[if (pred_y < 0.4420) 1 else 0];
bintesty<-test_y[if (test_y < 0.4420) 1 else 0];
bintestpred_y<-pred_y[if (pred_y < 0.4420) 1 else 0];
bintesty = rep(0,length(test_y));
bintestpred_y = rep(0,length(pred_y));
bintesty[test_y < 0.4420] <- 1;
bintestpred_y[pred_y < 0.4420] <- 1;
example <- confusionMatrix(data=bintestpred_y, reference = bintesty)
example <- confusionMatrix(data=bintestpred_y, reference =bintesty)
example <- confusionMatrix(data=bintestpred_y, reference=bintesty)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
Spotify = read.csv("SpotifyFeatureEngineeredCSV.csv")
drops = c("artist_name","track_name", "track_id", "ï..genre", "key", "mode", "time_signature")
df = Spotify[ , !(names(Spotify) %in% drops)]
set.seed(2022)
indexes = createDataPartition(df$popularity, p = .85, list = F)
train = df[indexes, ]
test = df[-indexes, ]
train_x = train[, -14]
train_x = scale(train_x)[,]
train_y = train[,14]
hist(train_x, xlim=c(-5,5), breaks=100)
test_x = test[, -14]
test_x = scale(test[,-14])[,]
test_y = test[,14]
summary(df)
library(class);
knnmodel = knnreg(train_x, train_y)
str(knnmodel)
pred_y = predict(knnmodel, data.frame(test_x))
print(data.frame(test_y, pred_y))
mse = mean((test_y - pred_y)^2)
mae = caret::MAE(test_y, pred_y)
rmse = caret::RMSE(test_y, pred_y)
cat("MSE: ", mse, "MAE: ", mae, " RMSE: ", rmse)
bintesty = rep(0,length(test_y));
bintestpred_y = rep(0,length(pred_y));
bintesty[test_y < 0.4420] <- 1;
bintestpred_y[pred_y < 0.4420] <- 1;
example <- confusionMatrix(data=bintestpred_y, reference=bintesty)
bintesty = c(0,length(test_y));
bintestpred_y = c(0,length(pred_y));
bintesty[test_y < 0.4420] <- 1;
bintestpred_y[pred_y < 0.4420] <- 1;
example <- confusionMatrix(data=bintestpred_y, reference=bintesty)
bintesty = factor(c(0,length(test_y)));
bintestpred_y = factor(c(0,length(pred_y));
bintesty = factor(c(0,length(test_y)));
bintestpred_y = factor(c(0,length(pred_y)));
bintesty[test_y < 0.4420] <- 1;
factor(bintesty[test_y < 0.4420] <- 1);
factor(bintestpred_y[pred_y < 0.4420] <- 1);
example <- confusionMatrix(data=bintestpred_y, reference=bintesty)
example
expected <- factor(bintesty[test_y < 0.4420] <- 1);
predicted <- factor(bintestpred_y[pred_y < 0.4420] <- 1);
example <- confusionMatrix(data=bintestpred_y, reference=bintesty)
example
example <- confusionMatrix(data=predicted, reference=predicted)
expected <- factor(bintesty[test_y < 0.4420] <- 1);
predicted <- factor(bintestpred_y[pred_y < 0.4420] <- 1);
example <- confusionMatrix(data=predicted, reference=predicted)
expected <- factor(bintesty[test_y < 0.4420] <- 1);
bintesty = c(0,length(test_y));
bintestpred_y = c(0,length(pred_y));
bintesty[test_y < 0.4420] <- 1;
bintestpred_y[pred_y < 0.4420] <- 1;
example <- confusionMatrix(data=bintestpred_y, reference=bintesty)
table(bintesty,bintestpred_y)
bintesty = c(0,length(test_y));
bintestpred_y = c(0,length(pred_y));
table(bintesty,bintestpred_y)
bintesty[test_y < 0.4420] <- 1;
bintestpred_y[pred_y < 0.4420] <- 1;
table(bintesty,bintestpred_y)
bintesty[test_y < 0.1] <- 1;
bintestpred_y[pred_y < 0.1] <- 1;
table(bintesty,bintestpred_y)
bintesty[test_y > 0.1] <- 1;
bintestpred_y[pred_y > 0.1] <- 1;
table(bintesty,bintestpred_y)
bintesty[test_y > 0.46] <- 1;
bintestpred_y[pred_y > 0.46] <- 1;
table(bintesty,bintestpred_y)
bintesty = c(0,length(test_y));
bintestpred_y = c(0,length(pred_y));
bintesty[test_y > 0.46] <- 1;
bintestpred_y[pred_y > 0.46] <- 1;
table(bintesty,bintestpred_y)
print(data.frame(test_y, pred_y))
cat("MSE: ", mse, "MAE: ", mae, " RMSE: ", rmse)
library(ggplot2)
library(ggrepel)
install.packages(c("ggrepel", "cowplot"))
library(ggrepel)
library(cowplot)
library(plspm)
install.packages("plspm")
library(plspm)
install.packages("installr")
updateR()
updateR()
updateR()
knitr::opts_chunk$set(echo = TRUE)
updateR()
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
# using the package:
updateR()
